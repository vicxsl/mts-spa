<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<context:component-scan
		base-package="com.qisen.mts" />

	<!-- 加载属性文件 -->
	<bean id="configProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:sp.properties</value>
			</list>
		</property>
	</bean>

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean>

	<bean id="dataSourceRW"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x' FROM DUAL" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<bean id="mybatisConfiguration"
		class="org.apache.ibatis.session.Configuration">
		<property name="jdbcTypeForNull" value="NULL" />
	</bean>

	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations"
			value="classpath:com/qisen/mts/*/dao/_sqlmap/*.xml" />
		<property name="dataSource" ref="dataSourceRW" />
		<property name="configuration" ref="mybatisConfiguration" />
		<property name="typeHandlersPackage"
			value="com.qisen.mts.common.util.handler" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceRW" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="com.qisen.mts.spa.dao,com.qisen.mts.common.dao" />
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory" />
	</bean>

	<tx:annotation-driven
		transaction-manager="transactionManager" />

	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED"
				rollback-for="Exception,com.qisen.mts.gateway.ExceptionWithCode" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="find*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:aspectj-autoproxy />

	<aop:config>
		<!-- 定义一个切入点 -->
		<aop:pointcut
			expression="execution (* com.qisen.mts..service..*Impl.*(..))"
			id="services" />
		<!-- 对切入点和事务的通知，进行适配 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="services" />
	</aop:config>

	<!-- XMemcachedClientBuilder have two arguments.First is server list,and 
		second is weights array. -->
	<bean name="memcachedClientBuilder"
		class="net.rubyeye.xmemcached.XMemcachedClientBuilder">
		<constructor-arg>
			<list>
				<bean class="java.net.InetSocketAddress">
					<constructor-arg>
						<!-- <value>127.0.0.1</value> -->
						<value>111.231.236.83</value>
						<!-- <value>http://dev.sentree.shop</value> -->
					</constructor-arg>
					<constructor-arg>
						<value>11211</value>
					</constructor-arg>
				</bean>
			</list>
		</constructor-arg>

		<property name="connectionPoolSize" value="2"></property>
		<property name="commandFactory">
			<bean class="net.rubyeye.xmemcached.command.TextCommandFactory"></bean>
		</property>
		<property name="sessionLocator">
			<bean
				class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"></bean>
		</property>
		<property name="transcoder">
			<bean
				class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />
		</property>
	</bean>

	<!-- Use factory bean to build memcached client -->
	<bean name="memcachedClient" factory-bean="memcachedClientBuilder"
		factory-method="build" destroy-method="shutdown" />

	<bean id="captchaProducer"
		class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<!-- 验证码宽度 -->
						<prop key="kaptcha.image.width">100</prop>
						<!-- 验证码高度 -->
						<prop key="kaptcha.image.height">40</prop>
						<!-- 生成验证码内容范围 -->
						<prop key="kaptcha.textproducer.char.string">0123456789</prop>
						<!-- 验证码个数 -->
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<!-- 是否有边框 -->
						<prop key="kaptcha.border">yes</prop>
						<!-- 边框颜色 -->
						<prop key="kaptcha.border.color">105,179,90</prop>
						<!-- 边框厚度 -->
						<prop key="kaptcha.border.thickness">1</prop>
						<!-- 验证码字体颜色 -->
						<prop key="kaptcha.textproducer.font.color">red</prop>
						<!-- 验证码字体大小 -->
						<prop key="kaptcha.textproducer.font.size">40</prop>
						<!-- 验证码所属字体样式 -->
						<prop key="kaptcha.textproducer.font.names">Arial, Courier</prop>
						<!-- 干扰线颜色 -->
						<prop key="kaptcha.noise.color">blue</prop>
						<!-- 干扰线实现类 -->
						<!-- <prop key="kaptcha.noise.impl">com.qisheng.cashier.util.EmptyNoise</prop> -->
						<!-- 验证码文本字符间距 -->
						<prop key="kaptcha.textproducer.char.space">3</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>
</beans>